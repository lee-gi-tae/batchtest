diff --git a/README.md b/README.md
new file mode 100644
index 0000000..23a3a9d
--- /dev/null
+++ b/README.md
@@ -0,0 +1 @@
+asdfasdf
\ No newline at end of file
diff --git a/dasdf.py b/dasdf.py
new file mode 100644
index 0000000..af73223
--- /dev/null
+++ b/dasdf.py
@@ -0,0 +1,3 @@
+somebody help me
+'asdkjvbkajasvbkjzcx
+sdafklhbasjhdvbaskjhdbf
\ No newline at end of file
diff --git a/models.py b/models.py
deleted file mode 100644
index 3d07fae..0000000
--- a/models.py
+++ /dev/null
@@ -1,40 +0,0 @@
-from sqlalchemy import TIMESTAMP, BigInteger, Column, ForeignKey, Index, Integer, Text, UniqueConstraint
-from sqlalchemy.orm import declarative_base  # orm모델의 베이스클래스를 만드는 도구
-from sqlalchemy.sql import func
-
-Base = declarative_base()
-
-
-class Repo(Base):
-    __tablename__ = "repos"
-
-    id = Column(BigInteger, primary_key=True, autoincrement=True)
-    repo_url = Column(Text, nullable=False, unique=True)
-    license = Column(String(50))
-    allow_indexing = Column(Boolean)
-    head_coomit_sha = Column(String(40))
-
-
-class Run(Base):
-    __tablename__ = "runs"
-
-    id = Column(BigInteger, primary_key=True, autoincrement=True)
-    repo_id = Column(BigInteger, ForeignKey("repos.id"), nullable=False)
-    # 처리 대상 커밋/브랜치 문자열(예: 짧은 해시, 'main', 'feature/xyz')
-    now_commit_sha = Column(string(40), nullable=False)
-    # 실행 범위/의미(예: 'pr' 또는 'main')
-    scope = Column(string(20), nullable=False)
-    # 실행 상태: 'running' | 'success' | 'failed' | 'partial_success'
-    status = Column(string(20), nullable=False)
-    started_at = Column(TIMESTAMP(timezone=True), server_default=func.now())
-    finished_at = Column(TIMESTAMP(timezone=True))
-    processed_count = Column(Integer, server_default="0")
-    failed_count = Column(Integer, server_default="0")
-    error_msg = Column(Text)
-
-    # __table_args__ = (
-    #     # repo_id + started_at 조합으로 최근 실행 이력 빠르게 보기
-    #     Index("idx_runs_repo_started_at", "repo_id", "started_at"),
-    #     # repo_id + commit으로 특정 커밋 결과 빠르게 찾기
-    #     Index("idx_runs_repo_commit", "repo_id", "commit"),
-    # )
diff --git a/main.py b/newname.py
similarity index 91%
rename from main.py
rename to newname.py
index 15acc95..1ee29d8 100644
--- a/main.py
+++ b/newname.py
@@ -21,13 +21,7 @@ class RunReq(BaseModel):
     repo_url: str
     ref: str | None = None
 
-class RunResp(BaseModel):
-    # 이 코드: 응답 요약.
-    repo_url: str
-    ref_used: str
-    saved_dir: str
-    chunk_count: int
-    inserted: int
+
 
 @app.post("/batch/run", response_model=RunResp)
 def batch_run(body: RunReq):
diff --git a/repo_resolver.py b/repo_resolver.py
index b168238..096baa7 100644
--- a/repo_resolver.py
+++ b/repo_resolver.py
@@ -5,27 +5,4 @@
 from .models import Repo
 
 
-# url 들어오면 int로 반환
-def create_repo_id(repo_url: str) -> int:
-    db = SessionLocal()
-    # 이미 있으면 id만 반환
-    try:
-        exists_id = db.execute(select(Repo.id).where(Repo.repo_url == repo_url)).scalar_one_or_none()
-        # 이미 있으면 그 id를 반환
-        if exists_id is not None:
-            return int(exists_id)
 
-        # 만약에 없다면 insert해서 id 발급
-        try:
-            new_id = db.execute(insert(Repo).values(repo_url=repo_url).returning(Repo.id)).scalar_one()
-            db.commit()
-            return int(new_id)
-
-        # 만약에 동시 요청 들어오면 하나는 성공 하나는 unique위반으로 롤백후 다시 조회
-        except IntegrityError:
-            db.rollback()
-            fixed_id = db.execute(select(Repo.id).where(Repo.repo_url == repo_url)).scalar_one()
-            return int(fixed_id)
-
-    finally:
-        db.close()
